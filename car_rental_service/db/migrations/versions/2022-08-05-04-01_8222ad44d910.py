"""Car availability zones, cars and reservations

Revision ID: 8222ad44d910
Revises: 2b7380507a71
Create Date: 2022-08-05 04:01:55.086044

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "8222ad44d910"
down_revision = "2b7380507a71"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "car_availability_zones",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default=sa.text("True"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=24), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default=sa.text("True"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=20), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "cars",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default=sa.text("True"),
            nullable=False,
        ),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("brand", sa.String(length=50), nullable=False),
        sa.Column("registered_number", sa.String(length=12), nullable=False),
        sa.Column("availability_zone_id", sa.Integer(), nullable=True),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["availability_zone_id"],
            ["car_availability_zones.id"],
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["categories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "reservations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default=sa.text("True"),
            nullable=False,
        ),
        sa.Column("car_id", sa.Integer(), nullable=True),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("status", sa.String(length=10), nullable=False),
        sa.ForeignKeyConstraint(
            ["car_id"],
            ["cars.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.add_column(
        "dummy_model",
        sa.Column("uuid", postgresql.UUID(as_uuid=True), nullable=False),
    )
    op.add_column("dummy_model", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("dummy_model", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.add_column(
        "dummy_model",
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default=sa.text("True"),
            nullable=False,
        ),
    )
    op.create_unique_constraint(None, "dummy_model", ["uuid"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "dummy_model", type_="unique")
    op.drop_column("dummy_model", "is_active")
    op.drop_column("dummy_model", "updated_at")
    op.drop_column("dummy_model", "created_at")
    op.drop_column("dummy_model", "uuid")
    op.drop_table("reservations")
    op.drop_table("cars")
    op.drop_table("categories")
    op.drop_table("car_availability_zones")
    # ### end Alembic commands ###
